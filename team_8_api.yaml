openapi: 3.0.3
info:
  title: Team 8 - Software Engineering Project
  version: '1.0'
  description: >-
    This web application is designed to help instructors manage and track
    student project progress throughout the semester, especially in larger
    classes. The system allows projects to be broken down into clear milestones
    and integrates with GitHub to visualize commit histories for real-time
    coding insights. Leveraging Generative AI, the application also analyzes
    documents like proposals and reports to assist in evaluation. A centralized
    dashboard provides an overview of all teams, customizable milestones, and
    AI-powered progress predictions, making it a comprehensive tool for academic
    project management.

    1. Project Initialization and Milestone Generation Component
        * Description: A GenAI-powered tool that allows instructors to input a project statement. The system generates milestones, tasks, and deadlines to create an initial project plan.
        * List of APIs:
            * POST API :- To create a new project
            * POST API :- To create a new milestone
            * DELETE API :- To delete a milestone
            * DELETE API :- To delete a project

    2. Real-Time Progress Monitoring Dashboard
        * Description: A dashboard for instructors and TAs to track individual and team progress. This component provides an at-a-glance view of milestones and tasks to identify potential roadblocks or delays.
        * List of APIs:
            * GET API :- To get the details regarding team progress

    3. GenAI-Powered Submission Assessment and Feedback Component
        * Description: A GenAI-enabled system to compare student submissions with planned milestones, perform plagiarism checks, and generate constructive feedback.
        * List of APIs:
            * POST API :- To validate a sudent submission
            * POST API :- To predict student performance

    4. Student-Facing Milestone Guidelines and Checklists
        * Description: Detailed milestone guidelines with templates and checklists that clarify expectations for students.
        * List of APIs:
            * GET API :- To get a milestone by ID
            * GET API :- To get all milstones for a project

    5. Peer Review and Evaluation System
        * Description: A peer review system that enables students to evaluate each otherâ€™s contributions.
        * List of APIs:
            * POST API :- To add evaluation criteria for a project
            * POST API :- To submit a peer review
            * GET API :- To retrieve peer reviews for a project
            * PUT API :- To edit a peer review
            * DELETE API :- To delete a peer review

    6. Project Documentation Chatbot
        * Description: A chatbot to answer questions regarding project documentation, guidelines, and deadlines, reducing response time for students.
        * List of APIs:
            * POST API :- To ask question to the chatbot

    7. GenAI-Integrated Version Control System
          * Description: A Git-powered version control system to monitor student code changes.
          * List of APIs:
              * GET API :- To check if GitHub user exists
              * GET API :- To get repository commits

    8. Notification System
          * Description: An alert system that informs students, TAs, and administrators when instructors provide feedback or update project milestones.
          * List of APIs:
              * POST API :- To create a new notification
              * GET API :- To retrieve a notification
              * DELETE API :- To delete a notification
              * GET API :- To retrieve notifications for a team
              * POST API :- To send reminder notifications
              * GET API :- Fetches a list of feedback notifications for a specific project using the project ID.

    9. System Maintenance and IT Support Component
          * Description: A back-end component providing IT staff with system logs, error reports, and tools to maintain system stability.
          * List of APIs:
              * GET API :- To retrieve system logs
              * POST API :- To search logs by keyword
servers:
  - url: http://127.0.0.1:5000/
    variables: {}
tags:
  - name: 0. User Management
  - name: 1. Project Initialization and Milestone Generation Component
  - name: 2. Real-Time Progress Monitoring Dashboard
  - name: 3. GenAI-Powered Submission Assessment and Feedback Component
  - name: 4. Student-Facing Milestone Guidelines and Checklists
  - name: 5. Peer Review and Evaluation System
  - name: 6. Project Documentation Chatbot
  - name: 7. GenAI-Integrated Version Control System
  - name: 8. Notification System for Instructor
  - name: 9. System Maintenance and IT Support Component
paths:
  /user-signup:
    description: User Signup
    post:
      summary: User Signup
      description: Route for user registration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  description: The username of the new user.
                  example: johndoe
                email:
                  type: string
                  description: The email address of the new user.
                  example: johndoe@example.com
                password:
                  type: string
                  description: The password for the new user account.
                  example: P@ssw0rd123
      operationId: '1'
      responses:
        '201':
          description: User successfully registered as student.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message indicating successful user creation.
                    example: Successfully registered as student.
        '400':
          description: Bad request due to missing or invalid fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating the cause of the failure.
                    example: Email already registered or Password not provided.
        '500':
          description: Internal server error while registering user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating a server-side issue.
                    example: >-
                      Error occurred while creating the user account - <error
                      message>
      tags:
        - 0. User Management
  /user-login:
    description: User Login
    post:
      summary: User Login
      description: Route for user login with email/username and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  description: The email address of the new user.
                  example: johndoe@example.com
                password:
                  type: string
                  description: The password for the new user account.
                  example: P@ssw0rd123
      operationId: '2'
      responses:
        '200':
          description: Login successful, returns the authentication token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication Token.
                    example: <Auth token>
                  email:
                    type: string
                    description: The email address of the user.
                    example: johndoe@example.com
                  role:
                    type: string
                    description: The role of the user.
                    example: Student
        '400':
          description: Bad request due to missing or incorrect fields (wrong password).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that password is wrong.
                    example: Wrong password
        '404':
          description: User not found (email or username does not exist).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that email or username does not exist.
                    example: Email or Username not found.
        '403':
          description: User is not activated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating that user has not been activated.
                    example: User not activated.
      tags:
        - 0. User Management
  /owner/{owner}:
    get:
      summary: Check if a GitHub user exists
      description: Returns a message confirming whether the specified GitHub owner exists.
      parameters:
        - name: owner
          in: path
          required: true
          description: GitHub username of the owner
          schema:
            type: string
      responses:
        200:
          description: Owner exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: <owner> is a valid owner name.
        404:
          description: Owner not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Owner <owner> not found on GitHub.
      tags:
        - 7. GenAI-Integrated Version Control System
  /owner/{owner}/repo/{repo}/commits:
    get:
      summary: Get repository commits
      description: Retrieves a list of commits for the specified repository owned by the given owner.
      parameters:
        - name: owner
          in: path
          required: true
          description: GitHub username of the owner
          schema:
            type: string
        - name: repo
          in: path
          required: true
          description: Name of the repository
          schema:
            type: string
      responses:
        200:
          description: Successful retrieval of commits
          content:
            application/json:
              schema:
                type: object
                properties:
                  total_commits:
                    type: integer
                    example: 42
                  commit_data:
                    type: array
                    items:
                      type: object
                      properties:
                        sha:
                          type: string
                          example: "abc123def456"
                        message:
                          type: string
                          example: "Initial commit"
                        committer_name:
                          type: string
                          example: "Jane Doe"
                        commit_date:
                          type: string
                          format: date-time
                          example: "2024-11-18T10:15:30Z"
                        author_name:
                          type: string
                          example: "John Doe"
                        author_date:
                          type: string
                          format: date-time
                          example: "2024-11-18T09:45:00Z"
        404:
          description: Repository not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error: Repository '{repo}' not found!"
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error: {status_code}"
      tags:
        - 7. GenAI-Integrated Version Control System
  /project:
    post:
      summary: Create a new project
      description: Creates a new project with a title and an optional description.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the project
                description:
                  type: string
                  description: Optional description of the project
      responses:
        201:
          description: Project created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: "Web App Development"
                  description:
                    type: string
                    example: "A project to develop a web application."
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project title is required"
      tags:
        - 1. Project Initialization and Milestone Generation Component
  /milestone:
    post:
      summary: Create a new milestone
      description: Adds a milestone to an existing project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  description: ID of the project
                task_no:
                  type: integer
                  description: Milestone task number
                task:
                  type: string
                  description: Task description
                description:
                  type: string
                  description: Optional detailed description of the milestone
                deadline:
                  type: string
                  format: date-time
                  description: Optional deadline for the milestone
      responses:
        201:
          description: Milestone created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  task_no:
                    type: integer
                    example: 1
                  task:
                    type: string
                    example: "Design database schema"
                  description:
                    type: string
                    example: "Finalize the database schema design for the project"
                  deadline:
                    type: string
                    format: date-time
                    example: "2024-11-20T23:59:59"
        404:
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project not found"
        400:
          description: Invalid data
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid data for creating project or milestone"
      tags:
        - 1. Project Initialization and Milestone Generation Component
  /milestone/{id}:
    get:
      summary: Get a milestone by ID
      description: Retrieves a milestone by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Milestone details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  project_id:
                    type: integer
                  task_no:
                    type: integer
                  task:
                    type: string
                  description:
                    type: string
                  deadline:
                    type: string
                    format: date-time
        404:
          description: Milestone not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Milestone not found"
      tags:
        - 4. Student-Facing Milestone Guidelines and Checklists
    delete:
      summary: Delete a milestone by ID
      description: Deletes a milestone by its ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Milestone deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Milestone deleted successfully"
        404:
          description: Milestone not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Milestone not found"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ID is required to delete a milestone"
      tags:
        - 1. Project Initialization and Milestone Generation Component
  /project/{project_id}/milestones:
    get:
      summary: Get all milestones for a project
      description: Retrieves all milestones for a specific project by project ID.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: List of milestones for the project
          content:
            application/json:
              schema:
                type: object
                properties:
                  project:
                    type: object
                    description: Details of the project
                  milestones:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        task_no:
                          type: integer
                        task:
                          type: string
                        description:
                          type: string
                        deadline:
                          type: string
                          format: date-time
        404:
          description: No milestones found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Milestones not found for the project"
      tags:
        - 4. Student-Facing Milestone Guidelines and Checklists
    delete:
      summary: Delete a project by ID
      description: Deletes a project by its ID.
      parameters:
        - name: project_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project deleted successfully"
        404:
          description: Project not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Project not found"
        400:
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ID is required to delete a project"
      tags:
        - 1. Project Initialization and Milestone Generation Component
  /teams/performance:
    get:
      summary: Retrieve team performance data
      description: Provides performance metrics for all teams, including the total number of milestones and overdue milestones.
      responses:
        200:
          description: Successfully retrieved team performance data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      type: object
                      properties:
                        team_id:
                          type: integer
                          description: Unique identifier of the team.
                          example: 1
                        team_name:
                          type: string
                          description: Name of the team.
                          example: "Team Alpha"
                        total_milestones:
                          type: integer
                          description: Total number of milestones assigned to the team.
                          example: 10
                        overdue_milestones:
                          type: integer
                          description: Number of milestones that are overdue.
                          example: 2
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR:
                    type: string
                    description: Error message detailing the cause of failure.
                    example: "An unexpected error occurred."
      tags:
        - 2. Real-Time Progress Monitoring Dashboard
  /submission/validate:
    post:
      summary: Validate a student submission
      description: Validates a student submission against the requirements of a specific milestone using a GenAI model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - submission
                - project_id
                - milestone_id
              properties:
                submission:
                  type: string
                  description: The content of the studentâ€™s submission.
                  example: "Implemented a REST API for project management system."
                project_id:
                  type: integer
                  description: The unique identifier for the project associated with the submission.
                  example: 101
                milestone_id:
                  type: integer
                  description: The unique identifier for the milestone being validated.
                  example: 10
      responses:
        200:
          description: Submission validation completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  validation_result:
                    type: object
                    description: The result of the validation process.
                    properties:
                      is_valid:
                        type: boolean
                        description: Indicates whether the submission meets the milestone requirements.
                        example: true
                      errors:
                        type: array
                        items:
                          type: string
                        description: List of identified errors in the submission.
                        example: []
                  feedback:
                    type: string
                    description: AI-generated feedback on the submission.
                    example: "The submission meets all milestone requirements. Excellent work!"
        400:
          description: Bad request due to missing or invalid input fields.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message detailing the missing fields.
                    example: "Missing required fields"
        404:
          description: Milestone not found in the database.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message when the milestone ID is invalid or not found.
                    example: "Milestone not found"
        500:
          description: Internal server error or issue with the GenAI model.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR:
                    type: string
                    description: Detailed error message.
                    example: "Failed to connect to GenAI model."
      tags:
        - 3. GenAI-Powered Submission Assessment and Feedback Component
  /students/performance-prediction:
    post:
      summary: Predict student performance
      description: Analyzes student activity and performance metrics using a GenAI model to identify at-risk students and provide actionable recommendations.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - students_data
              properties:
                students_data:
                  type: array
                  description: A list of data points representing student performance and activity metrics.
                  items:
                    type: object
                    required:
                      - student_id
                      - coding_activity
                      - task_completion_rate
                      - engagement_score
                    properties:
                      student_id:
                        type: integer
                        description: Unique identifier for the student.
                        example: 101
                      coding_activity:
                        type: number
                        format: float
                        description: Score representing the student's coding activity (e.g., lines of code, commits).
                        example: 78.5
                      task_completion_rate:
                        type: number
                        format: float
                        description: Percentage of assigned tasks completed by the student.
                        example: 85.0
                      engagement_score:
                        type: number
                        format: float
                        description: Engagement level of the student with project tools and tasks.
                        example: 90.5
      responses:
        200:
          description: Successfully retrieved prediction results.
          content:
            application/json:
              schema:
                type: object
                properties:
                  students_needing_support:
                    type: array
                    description: List of students identified as requiring additional support, including insights and recommendations.
                    items:
                      type: object
                      properties:
                        student_id:
                          type: integer
                          description: Unique ID of the student flagged for support.
                          example: 102
                        risk_level:
                          type: string
                          description: The predicted risk level for the student (e.g., low, medium, high).
                          example: "high"
                        recommendations:
                          type: string
                          description: Suggestions to improve the student's performance and engagement.
                          example: "Encourage participation in regular coding exercises."
        400:
          description: Missing or invalid request data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating invalid input.
                    example: "Missing students data"
        500:
          description: Internal server error or communication issue with the GenAI model.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR:
                    type: string
                    description: Detailed error message for debugging purposes.
                    example: "Failed to connect to the GenAI model."
      tags:
        - 3. GenAI-Powered Submission Assessment and Feedback Component
  /chatbot/ask:
    post:
      summary: Ask a question to the chatbot
      description: Provides answers to documentation-related queries using the Gemini AI model.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - question
                - api_key
              properties:
                question:
                  type: string
                  description: The question about the project documentation.
                  example: "What is the deadline for milestone 2?"
                api_key:
                  type: string
                  description: The API key for accessing the Gemini AI model.
                  example: "your-api-key-here"
      responses:
        200:
          description: Successfully retrieved the chatbot response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                    description: The chatbot's answer to the question.
                    example: "The deadline for milestone 2 is November 15, 2024."
        400:
          description: Missing required fields (`question` or `api_key`).
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message indicating missing fields.
                    example: "Missing question or api_key field"
        401:
          description: Invalid API key provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message for invalid API key.
                    example: "Invalid API Key"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR:
                    type: string
                    description: Detailed error message.
                    example: "An unexpected error occurred."
      tags:
        - 6. Project Documentation Chatbot
  /notifications:
    post:
      summary: Create a new notification
      description: Endpoint for creating a new notification for a team or individual.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the notification.
                message:
                  type: string
                  description: Content/message of the notification.
                created_for:
                  type: integer
                  description: ID of the team or individual the notification is created for.
                created_by:
                  type: integer
                  description: ID of the user (e.g., instructor) creating the notification.
              required:
                - title
                - message
                - created_for
                - created_by
            example:
              title: "Project Submission Reminder"
              message: "Don't forget to submit your project by tomorrow!"
              created_for: 5
              created_by: 1
      responses:
        '201':
          description: Notification created successfully.
          content:
            application/json:
              example:
                id: 10
                title: "Project Submission Reminder"
                message: "Don't forget to submit your project by tomorrow!"
                created_for: 5
                created_by: 1
                created_at: "2024-11-05T12:00:00Z"
        '400':
          description: Missing or invalid data.
          content:
            application/json:
              example:
                message: "Missing required fields."
        '500':
          description: Internal server error.
          content:
            application/json:
              example:
                ERROR: "Database connection error."
      tags:
        - 8. Notification System for Instructor
  /notifications/{id}:
    get:
      summary: Retrieve a specific notification
      description: Fetch details of a specific notification using its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the notification to retrieve.
          schema:
            type: integer
      responses:
        '200':
          description: Notification details retrieved successfully.
          content:
            application/json:
              example:
                id: 10
                title: "Project Submission Reminder"
                message: "Don't forget to submit your project by tomorrow!"
                created_at: "2024-11-05T12:00:00Z"
        '404':
          description: Notification not found.
          content:
            application/json:
              example:
                message: "Notification not found."
        '400':
          description: Invalid notification ID.
          content:
            application/json:
              example:
                message: "Invalid ID format."
      tags:
        - 8. Notification System for Instructor

    delete:
      summary: Delete a specific notification
      description: Delete a notification by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the notification to delete.
          schema:
            type: integer
      responses:
        '200':
          description: Notification deleted successfully.
          content:
            application/json:
              example:
                message: "Notification deleted successfully."
        '404':
          description: Notification not found.
          content:
            application/json:
              example:
                message: "Notification not found."
        '400':
          description: Invalid notification ID.
          content:
            application/json:
              example:
                message: "Notification ID is required to delete a notification."
      tags:
        - 8. Notification System for Instructor
  /notifications/team/{team_id}:
    get:
      summary: Retrieve notifications for a team
      description: Fetch all notifications created for a specific team.
      parameters:
        - name: team_id
          in: path
          required: true
          description: The ID of the team for which notifications are to be retrieved.
          schema:
            type: integer
      responses:
        '200':
          description: List of notifications retrieved successfully.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: Notification ID.
                    title:
                      type: string
                      description: Title of the notification.
                    message:
                      type: string
                      description: Content/message of the notification.
                    created_at:
                      type: string
                      format: date-time
                      description: Time the notification was created.
              example:
                - id: 1
                  title: "Milestone Reminder"
                  message: "Your milestone submission is due tomorrow."
                  created_at: "2024-11-01T10:30:00Z"
                - id: 2
                  title: "Meeting Scheduled"
                  message: "Team meeting scheduled for 3 PM today."
                  created_at: "2024-11-04T09:00:00Z"
        '404':
          description: No notifications found for the team.
          content:
            application/json:
              example:
                message: "No notifications found for this team."
        '400':
          description: Invalid team ID.
          content:
            application/json:
              example:
                message: "Invalid team ID format."
      tags:
        - 8. Notification System for Instructor
  /reminders/send:
    post:
      summary: Send reminder notifications
      description: Triggers the process of sending reminder notifications using a background task.
      responses:
        200:
          description: Reminder notifications successfully sent.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Reminder notifications sent successfully."
        400:
          description: Failed to send reminder notifications due to an error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR:
                    type: string
                    example: "Failed to send notifications due to a server error."
      tags:
        - 8. Notification System for Instructor
  /feedback/{project_id}:
    get:
      summary: Retrieve instructor feedback notifications
      description: Fetches a list of feedback notifications for a specific project using the project ID.
      parameters:
        - name: project_id
          in: path
          required: true
          description: The ID of the project for which to fetch feedback notifications.
          schema:
            type: integer
            example: 101
      responses:
        200:
          description: Successfully retrieved feedback notifications.
          content:
            application/json:
              schema:
                type: object
                properties:
                  feedback_notifications:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          description: Unique identifier of the notification.
                          example: 1
                        title:
                          type: string
                          description: Title of the feedback notification.
                          example: "Feedback on Milestone 1"
                        message:
                          type: string
                          description: Content of the feedback message.
                          example: "Please revise the task completion criteria."
                        created_at:
                          type: string
                          format: date-time
                          description: Timestamp of when the feedback notification was created.
                          example: "2024-11-05T10:00:00Z"
        500:
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  ERROR:
                    type: string
                    description: Error message detailing the cause of failure.
                    example: "An unexpected error occurred."
      tags:
        - 8. Notification System for Instructor
  /project/{projectId}/evaluation-criteria:
    post:
      summary: Add evaluation criteria for a specific project
      description: Allows an instructor to add a list of evaluation criteria for a specific project.
      parameters:
        - in: path
          name: projectId
          required: true
          schema:
            type: integer
          description: ID of the project to which the criteria are added.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                criteriaList:
                  type: array
                  items:
                    type: object
                    properties:
                      criterion:
                        type: string
                        description: Name of the evaluation criterion.
                      description:
                        type: string
                        description: Additional details about the criterion.
              required:
                - criteriaList
            example:
              criteriaList:
                - criterion: "Code Quality"
                  description: "Measures code efficiency and readability"
                - criterion: "Team Collaboration"
                  description: "Evaluates how well the student collaborated with the team"
      responses:
        '201':
          description: Criteria added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  projectId:
                    type: integer
                  criteria:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        criterion:
                          type: string
                        description:
                          type: string
              example:
                message: "Evaluation criteria added successfully"
                projectId: 101
                criteria:
                  - id: 1
                    criterion: "Code Quality"
                    description: "Measures code efficiency and readability"
                  - id: 2
                    criterion: "Team Collaboration"
                    description: "Evaluates how well the student collaborated with the team"
        '400':
          description: Invalid data format or missing fields.
          content:
            application/json:
              example:
                message: "Invalid data format. Please provide a valid criteria list."
        '403':
          description: Unauthorized access.
          content:
            application/json:
              example:
                message: "You are not authorized to add criteria."
        '404':
          description: Project ID not found.
          content:
            application/json:
              example:
                message: "Project with ID 101 not found."
        '500':
          description: Server error.
          content:
            application/json:
              example:
                message: "An error occurred: Internal server error"
      tags:
        - 5. Peer Review and Evaluation System
  /peer-review:
    post:
      summary: Submit a peer review
      description: Allows a student to submit a peer review for a specific project.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - reviewerId
                - projectId
                - criteria
              properties:
                reviewerId:
                  type: integer
                  description: The ID of the student submitting the review.
                  example: 201
                projectId:
                  type: integer
                  description: The ID of the project associated with the review.
                  example: 1001
                criteria:
                  type: array
                  description: Structured criteria for peer assessment.
                  items:
                    type: object
                    properties:
                      criterion:
                        type: string
                        description: The criterion being assessed.
                        example: "Code quality"
                      score:
                        type: number
                        description: The score given for the criterion.
                        example: 4.5
                      comment:
                        type: string
                        description: Additional feedback for the criterion.
                        example: "Well-written and optimized code."
      responses:
        201:
          description: Peer review submitted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Peer review submitted successfully."
                  reviewId:
                    type: integer
                    example: 501
        400:
          description: Invalid request body or data.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid request data."
      tags:
        - 5. Peer Review and Evaluation System
  /peer-review/project/{projectId}:
    get:
      summary: Retrieve peer reviews for a specific project
      description: Fetch all peer reviews associated with a specific project.
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the project.
          example: 1001
      responses:
        200:
          description: Peer reviews retrieved successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  projectId:
                    type: integer
                    example: 1001
                  reviews:
                    type: array
                    items:
                      type: object
                      properties:
                        reviewerId:
                          type: integer
                          example: 201
                        criteria:
                          type: array
                          items:
                            type: object
                            properties:
                              criterion:
                                type: string
                                example: "Code quality"
                              score:
                                type: number
                                example: 4.5
                              comment:
                                type: string
                                example: "Well-written and optimized code."
        404:
          description: No peer reviews found for the project.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No peer reviews found for project ID 1001."
      tags:
        - 5. Peer Review and Evaluation System
  /peer-review/{reviewId}:
    put:
      summary: Edit a peer review
      description: Allows a student to update an existing peer review.
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the peer review to be updated.
          example: 501
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                criteria:
                  type: array
                  items:
                    type: object
                    properties:
                      criterion:
                        type: string
                        example: "Collaboration"
                      score:
                        type: number
                        example: 4.7
                      comment:
                        type: string
                        example: "Improved collaboration in recent weeks."
      responses:
        200:
          description: Peer review updated successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Peer review updated successfully."
        404:
          description: Peer review not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Peer review not found."
      tags:
        - 5. Peer Review and Evaluation System

    delete:
      summary: Delete a peer review
      description: Enables a student to delete a previously submitted peer review.
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
          description: The ID of the peer review to be deleted.
          example: 501
      responses:
        200:
          description: Peer review deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Peer review deleted successfully."
        404:
          description: Peer review not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Peer review not found."
      tags:
        - 5. Peer Review and Evaluation System
  /logs:
    get:
      summary: Retrieve system logs
      description: Fetch system logs with optional filters (e.g., date range, severity).
      parameters:
        - name: start_date
          in: query
          description: Start date for logs (ISO format).
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: End date for logs (ISO format).
          schema:
            type: string
            format: date
        - name: severity
          in: query
          description: Severity level (INFO, WARNING, ERROR).
          schema:
            type: string
      responses:
        200:
          description: List of logs
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    severity:
                      type: string
                    message:
                      type: string
      tags:
        - 9. System Maintenance and IT Support Component
  /logs/search:
    post:
      summary: Search logs by keyword
      description: Perform a search on system logs using keywords or patterns.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                keyword:
                  type: string
                  description: Keyword or pattern for searching logs.
      responses:
        200:
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    timestamp:
                      type: string
                      format: date-time
                    severity:
                      type: string
                    message:
                      type: string
      tags:
        - 9. System Maintenance and IT Support Component
